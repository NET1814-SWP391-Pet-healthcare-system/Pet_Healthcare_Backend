// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240526165903_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateOnly?>("CancellationDate")
                        .HasColumnType("date");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<double?>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("float");

                    b.Property<int?>("VetId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PetId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.HasIndex("VetId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            CustomerId = 1,
                            Date = new DateOnly(2023, 6, 15),
                            PetId = 1,
                            ServiceId = 1,
                            SlotId = 1,
                            Status = 0,
                            TotalCost = 50.0,
                            VetId = 4
                        },
                        new
                        {
                            AppointmentId = 2,
                            CustomerId = 2,
                            Date = new DateOnly(2023, 7, 1),
                            PetId = 2,
                            ServiceId = 2,
                            SlotId = 2,
                            Status = 1,
                            TotalCost = 30.0,
                            VetId = 4
                        },
                        new
                        {
                            AppointmentId = 3,
                            Comments = "Friendly staff, great service.",
                            CustomerId = 2,
                            Date = new DateOnly(2023, 8, 10),
                            PetId = 3,
                            Rating = 4,
                            ServiceId = 3,
                            SlotId = 3,
                            Status = 2,
                            TotalCost = 40.0,
                            VetId = 5
                        },
                        new
                        {
                            AppointmentId = 4,
                            CustomerId = 1,
                            Date = new DateOnly(2023, 9, 1),
                            PetId = 4,
                            ServiceId = 4,
                            SlotId = 4,
                            Status = 0,
                            TotalCost = 75.0,
                            VetId = 5
                        },
                        new
                        {
                            AppointmentId = 5,
                            CustomerId = 1,
                            Date = new DateOnly(2023, 10, 15),
                            PetId = 5,
                            ServiceId = 1,
                            SlotId = 5,
                            Status = 0,
                            TotalCost = 500.0,
                            VetId = 4
                        });
                });

            modelBuilder.Entity("Entities.AppointmentDetail", b =>
                {
                    b.Property<int>("AppointmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentDetailId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Treatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentDetailId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("RecordId");

                    b.ToTable("AppointmentDetail");

                    b.HasData(
                        new
                        {
                            AppointmentDetailId = 1,
                            AppointmentId = 1,
                            Diagnosis = "Healthy",
                            RecordId = 1
                        },
                        new
                        {
                            AppointmentDetailId = 2,
                            AppointmentId = 2,
                            Diagnosis = "Ear Infection",
                            Medication = "Otomax Otic Solution",
                            RecordId = 2,
                            Treatment = "Antibiotic Ear Drops"
                        },
                        new
                        {
                            AppointmentDetailId = 3,
                            AppointmentId = 3,
                            Diagnosis = "Feather Plucking",
                            RecordId = 3,
                            Treatment = "Environmental Enrichment"
                        },
                        new
                        {
                            AppointmentDetailId = 4,
                            AppointmentId = 4,
                            Diagnosis = "Swim Bladder Disorder",
                            Medication = "Antibiotics and Anti-inflammatory",
                            RecordId = 4,
                            Treatment = "Medication and Diet Change"
                        },
                        new
                        {
                            AppointmentDetailId = 5,
                            AppointmentId = 5,
                            Diagnosis = "Gastrointestinal Stasis",
                            Medication = "CisaprIde and Simethicone",
                            RecordId = 5,
                            Treatment = "Motility Medication and Massage"
                        });
                });

            modelBuilder.Entity("Entities.Hospitalization", b =>
                {
                    b.Property<int>("HospitalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalizationId"));

                    b.Property<DateOnly?>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DischargeDate")
                        .HasColumnType("date");

                    b.Property<int?>("KennelId")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("float");

                    b.Property<int?>("VetId")
                        .HasColumnType("int");

                    b.HasKey("HospitalizationId");

                    b.HasIndex("KennelId");

                    b.HasIndex("PetId");

                    b.HasIndex("VetId");

                    b.ToTable("Hospitalization");

                    b.HasData(
                        new
                        {
                            HospitalizationId = 1,
                            AdmissionDate = new DateOnly(2023, 5, 1),
                            DischargeDate = new DateOnly(2023, 5, 5),
                            KennelId = 1,
                            PetId = 1,
                            TotalCost = 125.0,
                            VetId = 4
                        },
                        new
                        {
                            HospitalizationId = 2,
                            AdmissionDate = new DateOnly(2023, 6, 10),
                            DischargeDate = new DateOnly(2023, 6, 12),
                            KennelId = 2,
                            PetId = 2,
                            TotalCost = 120.0,
                            VetId = 4
                        },
                        new
                        {
                            HospitalizationId = 3,
                            AdmissionDate = new DateOnly(2023, 7, 15),
                            DischargeDate = new DateOnly(2023, 7, 18),
                            KennelId = 3,
                            PetId = 3,
                            TotalCost = 60.0,
                            VetId = 5
                        },
                        new
                        {
                            HospitalizationId = 4,
                            AdmissionDate = new DateOnly(2023, 8, 1),
                            DischargeDate = new DateOnly(2023, 8, 3),
                            KennelId = 4,
                            PetId = 4,
                            TotalCost = 90.0,
                            VetId = 5
                        },
                        new
                        {
                            HospitalizationId = 5,
                            AdmissionDate = new DateOnly(2023, 9, 10),
                            DischargeDate = new DateOnly(2023, 9, 12),
                            KennelId = 5,
                            PetId = 5,
                            TotalCost = 105.0,
                            VetId = 5
                        });
                });

            modelBuilder.Entity("Entities.Kennel", b =>
                {
                    b.Property<int>("KennelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KennelId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<double?>("DailyCost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KennelId");

                    b.ToTable("Kennel");

                    b.HasData(
                        new
                        {
                            KennelId = 1,
                            Capacity = 20,
                            DailyCost = 25.0,
                            Description = "Comfortable and secure kennel for your pet."
                        },
                        new
                        {
                            KennelId = 2,
                            Capacity = 10,
                            DailyCost = 40.0,
                            Description = "Luxury kennel with premium amenities."
                        },
                        new
                        {
                            KennelId = 3,
                            Capacity = 30,
                            DailyCost = 15.0,
                            Description = "Budget-friendly kennel for short-term stays."
                        },
                        new
                        {
                            KennelId = 4,
                            Capacity = 25,
                            DailyCost = 30.0,
                            Description = "Large kennel with outdoor play area."
                        },
                        new
                        {
                            KennelId = 5,
                            Capacity = 15,
                            DailyCost = 35.0,
                            Description = "Climate-controlled kennel for exotic pets."
                        });
                });

            modelBuilder.Entity("Entities.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetId"));

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("PetId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Pet");

                    b.HasData(
                        new
                        {
                            PetId = 1,
                            Breed = "Labrador Retriever",
                            CustomerId = 1,
                            Gender = true,
                            ImageURL = "https://example.com/pet_images/buddy.jpg",
                            Name = "Buddy",
                            Species = "Dog",
                            Weight = 30.5
                        },
                        new
                        {
                            PetId = 2,
                            Breed = "Siamese",
                            CustomerId = 2,
                            Gender = false,
                            ImageURL = "https://example.com/pet_images/whiskers.jpg",
                            Name = "Whiskers",
                            Species = "Cat",
                            Weight = 4.2000000000000002
                        },
                        new
                        {
                            PetId = 3,
                            Breed = "Cockatiel",
                            CustomerId = 2,
                            Gender = true,
                            ImageURL = "https://example.com/pet_images/rocky.jpg",
                            Name = "Rocky",
                            Species = "Bird",
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            PetId = 4,
                            Breed = "Goldfish",
                            CustomerId = 1,
                            Gender = false,
                            ImageURL = "https://example.com/pet_images/finny.jpg",
                            Name = "Finny",
                            Species = "Fish",
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            PetId = 5,
                            Breed = "Lop",
                            CustomerId = 1,
                            Gender = true,
                            ImageURL = "https://example.com/pet_images/fluffy.jpg",
                            Name = "Fluffy",
                            Species = "Rabbit",
                            Weight = 2.7999999999999998
                        });
                });

            modelBuilder.Entity("Entities.PetHealthTrack", b =>
                {
                    b.Property<int>("PetHealthTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetHealthTrackId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HospitalizationId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("PetHealthTrackId");

                    b.HasIndex("HospitalizationId");

                    b.ToTable("PetHealthTrack");

                    b.HasData(
                        new
                        {
                            PetHealthTrackId = 1,
                            Date = new DateOnly(2023, 5, 3),
                            Description = "Recovering from surgery",
                            HospitalizationId = 1,
                            Status = 0
                        },
                        new
                        {
                            PetHealthTrackId = 2,
                            Date = new DateOnly(2023, 6, 11),
                            Description = "Monitoring for dehydration",
                            HospitalizationId = 2,
                            Status = 1
                        },
                        new
                        {
                            PetHealthTrackId = 3,
                            Date = new DateOnly(2023, 7, 16),
                            Description = "Treating respiratory infection",
                            HospitalizationId = 3,
                            Status = 2
                        },
                        new
                        {
                            PetHealthTrackId = 4,
                            Date = new DateOnly(2023, 8, 2),
                            Description = "Observing swim bladder disorder",
                            HospitalizationId = 4,
                            Status = 0
                        },
                        new
                        {
                            PetHealthTrackId = 5,
                            Date = new DateOnly(2023, 9, 11),
                            Description = "Managing gastrointestinal stasis",
                            HospitalizationId = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.PetVaccination", b =>
                {
                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.Property<int?>("VaccineId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("VaccinationDate")
                        .HasColumnType("date");

                    b.HasKey("PetId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("PetVaccination");

                    b.HasData(
                        new
                        {
                            PetId = 1,
                            VaccineId = 1,
                            VaccinationDate = new DateOnly(2023, 4, 1)
                        },
                        new
                        {
                            PetId = 1,
                            VaccineId = 2,
                            VaccinationDate = new DateOnly(2022, 8, 15)
                        },
                        new
                        {
                            PetId = 2,
                            VaccineId = 3,
                            VaccinationDate = new DateOnly(2023, 3, 1)
                        },
                        new
                        {
                            PetId = 1,
                            VaccineId = 4,
                            VaccinationDate = new DateOnly(2023, 1, 10)
                        },
                        new
                        {
                            PetId = 3,
                            VaccineId = 5,
                            VaccinationDate = new DateOnly(2023, 2, 20)
                        });
                });

            modelBuilder.Entity("Entities.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("NumberOfVisits")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.HasKey("RecordId");

                    b.HasIndex("PetId");

                    b.ToTable("Record");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            NumberOfVisits = 1,
                            PetId = 1
                        },
                        new
                        {
                            RecordId = 2,
                            NumberOfVisits = 1,
                            PetId = 2
                        },
                        new
                        {
                            RecordId = 3,
                            NumberOfVisits = 1,
                            PetId = 3
                        },
                        new
                        {
                            RecordId = 4,
                            NumberOfVisits = 1,
                            PetId = 4
                        },
                        new
                        {
                            RecordId = 5,
                            NumberOfVisits = 1,
                            PetId = 5
                        });
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Vet"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            Cost = 50.0,
                            Description = "Comprehensive health check-up for your pet.",
                            Name = "Annual Check-Up"
                        },
                        new
                        {
                            ServiceId = 2,
                            Cost = 30.0,
                            Description = "Essential vaccines to keep your pet healthy.",
                            Name = "Vaccination"
                        },
                        new
                        {
                            ServiceId = 3,
                            Cost = 40.0,
                            Description = "Addressing behavioral issues with your pet.",
                            Name = "Behavioral Consultation"
                        },
                        new
                        {
                            ServiceId = 4,
                            Cost = 75.0,
                            Description = "Advanced surgical procedures for complex conditions.",
                            Name = "Specialized Surgery"
                        });
                });

            modelBuilder.Entity("Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("SlotId");

                    b.ToTable("Slot");

                    b.HasData(
                        new
                        {
                            SlotId = 1,
                            EndTime = new TimeOnly(10, 0, 0),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            SlotId = 2,
                            EndTime = new TimeOnly(11, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            SlotId = 3,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            SlotId = 4,
                            EndTime = new TimeOnly(13, 0, 0),
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            SlotId = 5,
                            EndTime = new TimeOnly(14, 0, 0),
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            SlotId = 6,
                            EndTime = new TimeOnly(15, 0, 0),
                            StartTime = new TimeOnly(14, 0, 0)
                        },
                        new
                        {
                            SlotId = 7,
                            EndTime = new TimeOnly(16, 0, 0),
                            StartTime = new TimeOnly(15, 0, 0)
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            Address = "789 Elm St, Anytown USA",
                            Country = "United States",
                            Email = "bob.johnson@example.com",
                            FirstName = "Bob",
                            Gender = true,
                            ImageURL = "https://example.com/user_images/bjohnson.jpg",
                            IsActive = true,
                            LastName = "Johnson",
                            Password = "password789",
                            RoleId = 1,
                            Username = "bjohnson"
                        });
                });

            modelBuilder.Entity("Entities.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAnnualVaccine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VaccineId");

                    b.ToTable("Vaccine");

                    b.HasData(
                        new
                        {
                            VaccineId = 1,
                            Description = "Prevents rabies infection.",
                            Name = "Rabies Vaccine"
                        },
                        new
                        {
                            VaccineId = 2,
                            Description = "Prevents canine distemper.",
                            Name = "Distemper Vaccine"
                        },
                        new
                        {
                            VaccineId = 3,
                            Description = "Prevents feline leukemia.",
                            Name = "Feline Leukemia Vaccine"
                        },
                        new
                        {
                            VaccineId = 4,
                            Description = "Prevents canine parvovirus.",
                            Name = "Parvovirus Vaccine"
                        },
                        new
                        {
                            VaccineId = 5,
                            Description = "Prevents avian influenza.",
                            Name = "Avian Influenza Vaccine"
                        });
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.HasBaseType("Entities.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Main St, Anytown USA",
                            Country = "United States",
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            Gender = true,
                            ImageURL = "https://example.com/user_images/jdoe.jpg",
                            IsActive = true,
                            LastName = "Doe",
                            Password = "password123",
                            RoleId = 2,
                            Username = "jdoe"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Oak Rd, Anytown USA",
                            Country = "United States",
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            Gender = false,
                            ImageURL = "https://example.com/user_images/jsmith.jpg",
                            IsActive = true,
                            LastName = "Smith",
                            Password = "password456",
                            RoleId = 2,
                            Username = "jsmith"
                        });
                });

            modelBuilder.Entity("Entities.Vet", b =>
                {
                    b.HasBaseType("Entities.User");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Vet");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            Address = "456 Pine Ave, Anytown USA",
                            Country = "United States",
                            Email = "emily.wilson@example.com",
                            FirstName = "Emily",
                            Gender = false,
                            ImageURL = "https://example.com/user_images/ewilson.jpg",
                            IsActive = true,
                            LastName = "Wilson",
                            Password = "password321",
                            RoleId = 3,
                            Username = "ewilson",
                            Rating = 4,
                            YearsOfExperience = 10
                        },
                        new
                        {
                            UserId = 5,
                            Address = "789 Maple Ln, Anytown USA",
                            Country = "United States",
                            Email = "michael.brown@example.com",
                            FirstName = "Michael",
                            Gender = true,
                            ImageURL = "https://example.com/user_images/mbrown.jpg",
                            IsActive = true,
                            LastName = "Brown",
                            Password = "password654",
                            RoleId = 3,
                            Username = "mbrown",
                            Rating = 5,
                            YearsOfExperience = 7
                        });
                });

            modelBuilder.Entity("Entities.Appointment", b =>
                {
                    b.HasOne("Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId");

                    b.HasOne("Entities.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Entities.Slot", "Slot")
                        .WithMany("Appointments")
                        .HasForeignKey("SlotId");

                    b.HasOne("Entities.Vet", "Vet")
                        .WithMany("Appointments")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Pet");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("Entities.AppointmentDetail", b =>
                {
                    b.HasOne("Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Entities.Record", "Record")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Appointment");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Entities.Hospitalization", b =>
                {
                    b.HasOne("Entities.Kennel", "Kennel")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("KennelId");

                    b.HasOne("Entities.Pet", "Pet")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("PetId");

                    b.HasOne("Entities.Vet", "Vet")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Kennel");

                    b.Navigation("Pet");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("Entities.Pet", b =>
                {
                    b.HasOne("Entities.Customer", "Customer")
                        .WithMany("Pets")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.PetHealthTrack", b =>
                {
                    b.HasOne("Entities.Hospitalization", "Hospitalization")
                        .WithMany("PetHealthTracks")
                        .HasForeignKey("HospitalizationId");

                    b.Navigation("Hospitalization");
                });

            modelBuilder.Entity("Entities.PetVaccination", b =>
                {
                    b.HasOne("Entities.Pet", "Pet")
                        .WithMany("PetVaccinations")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Vaccine", "Vaccine")
                        .WithMany("PetVaccinations")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Entities.Record", b =>
                {
                    b.HasOne("Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Hospitalization", b =>
                {
                    b.Navigation("PetHealthTracks");
                });

            modelBuilder.Entity("Entities.Kennel", b =>
                {
                    b.Navigation("Hospitalizations");
                });

            modelBuilder.Entity("Entities.Pet", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Hospitalizations");

                    b.Navigation("PetVaccinations");
                });

            modelBuilder.Entity("Entities.Record", b =>
                {
                    b.Navigation("AppointmentDetails");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Entities.Slot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Entities.Vaccine", b =>
                {
                    b.Navigation("PetVaccinations");
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Entities.Vet", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Hospitalizations");
                });
#pragma warning restore 612, 618
        }
    }
}
